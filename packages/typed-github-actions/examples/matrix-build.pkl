/// Matrix Build GitHub Actions Workflow Example
///
/// This example demonstrates a matrix strategy for building and testing
/// across multiple platforms, Node.js versions, and operating systems.
///
/// To use this example:
/// 1. Render to YAML: pkl eval -f yaml matrix-build.pkl > .github/workflows/matrix-build.yml
/// 2. Commit the generated workflow file to your repository
module matrix.build

output {
  renderer = new YamlRenderer {}
}

name = "Matrix Build"

on {
  push {
    branches {
      "main"
      "develop"
    }
  }
  pull_request {
    branches {
      "main"
    }
  }
}

env {
  ["CI"] = "true"
}

jobs {
  ["test"] {
    name = "Test on ${{ matrix.os }} with Node ${{ matrix.node }}"
    `runs-on` = "${{ matrix.os }}"
    
    strategy {
      matrix {
        os {
          "ubuntu-latest"
          "windows-latest"
          "macos-latest"
        }
        node {
          16
          18
          20
        }
        exclude {
          new {
            os = "macos-latest"
            node = 16
          }
        }
      }
      `fail-fast` = false
      `max-parallel` = 6
    }
    
    steps {
      new {
        name = "Checkout code"
        uses = "actions/checkout@v4"
      }
      
      new {
        name = "Setup Node.js ${{ matrix.node }}"
        uses = "actions/setup-node@v4"
        with {
          ["node-version"] = "${{ matrix.node }}"
          ["cache"] = "npm"
        }
      }
      
      new {
        name = "Install dependencies"
        run = "npm ci"
      }
      
      new {
        name = "Run linter"
        run = "npm run lint"
      }
      
      new {
        name = "Run tests"
        run = "npm test"
      }
      
      new {
        name = "Upload coverage"
        uses = "codecov/codecov-action@v3"
        with {
          ["files"] = "./coverage/coverage-final.json"
          ["flags"] = "unittests-${{ matrix.os }}-node${{ matrix.node }}"
        }
        `if` = "matrix.os == 'ubuntu-latest'"
      }
    }
  }
  
  ["build"] {
    name = "Build on ${{ matrix.platform }}"
    `runs-on` = "${{ matrix.os }}"
    needs = "test"
    
    strategy {
      matrix {
        include {
          new {
            os = "ubuntu-latest"
            platform = "linux"
            arch = "x64"
          }
          new {
            os = "ubuntu-latest"
            platform = "linux"
            arch = "arm64"
          }
          new {
            os = "windows-latest"
            platform = "windows"
            arch = "x64"
          }
          new {
            os = "macos-latest"
            platform = "darwin"
            arch = "x64"
          }
          new {
            os = "macos-latest"
            platform = "darwin"
            arch = "arm64"
          }
        }
      }
    }
    
    steps {
      new {
        name = "Checkout code"
        uses = "actions/checkout@v4"
      }
      
      new {
        name = "Setup Node.js"
        uses = "actions/setup-node@v4"
        with {
          ["node-version"] = "20"
          ["cache"] = "npm"
        }
      }
      
      new {
        name = "Install dependencies"
        run = "npm ci"
      }
      
      new {
        name = "Build for ${{ matrix.platform }}-${{ matrix.arch }}"
        run = "npm run build -- --platform=${{ matrix.platform }} --arch=${{ matrix.arch }}"
      }
      
      new {
        name = "Upload build artifacts"
        uses = "actions/upload-artifact@v3"
        with {
          ["name"] = "build-${{ matrix.platform }}-${{ matrix.arch }}"
          ["path"] = "dist/"
          ["retention-days"] = "7"
        }
      }
    }
  }
}
